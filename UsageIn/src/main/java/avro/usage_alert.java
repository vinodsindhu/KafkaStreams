/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class usage_alert extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -302629505584192627L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"usage_alert\",\"namespace\":\"avro\",\"fields\":[{\"name\":\"user_name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Web User Name\"},{\"name\":\"email_id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Email ID\"},{\"name\":\"usage_alert\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Usage Alert description\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<usage_alert> ENCODER =
      new BinaryMessageEncoder<usage_alert>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<usage_alert> DECODER =
      new BinaryMessageDecoder<usage_alert>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<usage_alert> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<usage_alert> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<usage_alert>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this usage_alert to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a usage_alert from a ByteBuffer. */
  public static usage_alert fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Web User Name */
   private java.lang.String user_name;
  /** Email ID */
   private java.lang.String email_id;
  /** Usage Alert description */
   private java.lang.String usage_alert;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public usage_alert() {}

  /**
   * All-args constructor.
   * @param user_name Web User Name
   * @param email_id Email ID
   * @param usage_alert Usage Alert description
   */
  public usage_alert(java.lang.String user_name, java.lang.String email_id, java.lang.String usage_alert) {
    this.user_name = user_name;
    this.email_id = email_id;
    this.usage_alert = usage_alert;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return user_name;
    case 1: return email_id;
    case 2: return usage_alert;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: user_name = (java.lang.String)value$; break;
    case 1: email_id = (java.lang.String)value$; break;
    case 2: usage_alert = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'user_name' field.
   * @return Web User Name
   */
  public java.lang.String getUserName() {
    return user_name;
  }


  /**
   * Gets the value of the 'email_id' field.
   * @return Email ID
   */
  public java.lang.String getEmailId() {
    return email_id;
  }


  /**
   * Gets the value of the 'usage_alert' field.
   * @return Usage Alert description
   */
  public java.lang.String getUsageAlert() {
    return usage_alert;
  }


  /**
   * Creates a new usage_alert RecordBuilder.
   * @return A new usage_alert RecordBuilder
   */
  public static avro.usage_alert.Builder newBuilder() {
    return new avro.usage_alert.Builder();
  }

  /**
   * Creates a new usage_alert RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new usage_alert RecordBuilder
   */
  public static avro.usage_alert.Builder newBuilder(avro.usage_alert.Builder other) {
    return new avro.usage_alert.Builder(other);
  }

  /**
   * Creates a new usage_alert RecordBuilder by copying an existing usage_alert instance.
   * @param other The existing instance to copy.
   * @return A new usage_alert RecordBuilder
   */
  public static avro.usage_alert.Builder newBuilder(avro.usage_alert other) {
    return new avro.usage_alert.Builder(other);
  }

  /**
   * RecordBuilder for usage_alert instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<usage_alert>
    implements org.apache.avro.data.RecordBuilder<usage_alert> {

    /** Web User Name */
    private java.lang.String user_name;
    /** Email ID */
    private java.lang.String email_id;
    /** Usage Alert description */
    private java.lang.String usage_alert;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(avro.usage_alert.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.user_name)) {
        this.user_name = data().deepCopy(fields()[0].schema(), other.user_name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.email_id)) {
        this.email_id = data().deepCopy(fields()[1].schema(), other.email_id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.usage_alert)) {
        this.usage_alert = data().deepCopy(fields()[2].schema(), other.usage_alert);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing usage_alert instance
     * @param other The existing instance to copy.
     */
    private Builder(avro.usage_alert other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.user_name)) {
        this.user_name = data().deepCopy(fields()[0].schema(), other.user_name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.email_id)) {
        this.email_id = data().deepCopy(fields()[1].schema(), other.email_id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.usage_alert)) {
        this.usage_alert = data().deepCopy(fields()[2].schema(), other.usage_alert);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'user_name' field.
      * Web User Name
      * @return The value.
      */
    public java.lang.String getUserName() {
      return user_name;
    }

    /**
      * Sets the value of the 'user_name' field.
      * Web User Name
      * @param value The value of 'user_name'.
      * @return This builder.
      */
    public avro.usage_alert.Builder setUserName(java.lang.String value) {
      validate(fields()[0], value);
      this.user_name = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'user_name' field has been set.
      * Web User Name
      * @return True if the 'user_name' field has been set, false otherwise.
      */
    public boolean hasUserName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'user_name' field.
      * Web User Name
      * @return This builder.
      */
    public avro.usage_alert.Builder clearUserName() {
      user_name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'email_id' field.
      * Email ID
      * @return The value.
      */
    public java.lang.String getEmailId() {
      return email_id;
    }

    /**
      * Sets the value of the 'email_id' field.
      * Email ID
      * @param value The value of 'email_id'.
      * @return This builder.
      */
    public avro.usage_alert.Builder setEmailId(java.lang.String value) {
      validate(fields()[1], value);
      this.email_id = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'email_id' field has been set.
      * Email ID
      * @return True if the 'email_id' field has been set, false otherwise.
      */
    public boolean hasEmailId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'email_id' field.
      * Email ID
      * @return This builder.
      */
    public avro.usage_alert.Builder clearEmailId() {
      email_id = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'usage_alert' field.
      * Usage Alert description
      * @return The value.
      */
    public java.lang.String getUsageAlert() {
      return usage_alert;
    }

    /**
      * Sets the value of the 'usage_alert' field.
      * Usage Alert description
      * @param value The value of 'usage_alert'.
      * @return This builder.
      */
    public avro.usage_alert.Builder setUsageAlert(java.lang.String value) {
      validate(fields()[2], value);
      this.usage_alert = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'usage_alert' field has been set.
      * Usage Alert description
      * @return True if the 'usage_alert' field has been set, false otherwise.
      */
    public boolean hasUsageAlert() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'usage_alert' field.
      * Usage Alert description
      * @return This builder.
      */
    public avro.usage_alert.Builder clearUsageAlert() {
      usage_alert = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public usage_alert build() {
      try {
        usage_alert record = new usage_alert();
        record.user_name = fieldSetFlags()[0] ? this.user_name : (java.lang.String) defaultValue(fields()[0]);
        record.email_id = fieldSetFlags()[1] ? this.email_id : (java.lang.String) defaultValue(fields()[1]);
        record.usage_alert = fieldSetFlags()[2] ? this.usage_alert : (java.lang.String) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<usage_alert>
    WRITER$ = (org.apache.avro.io.DatumWriter<usage_alert>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<usage_alert>
    READER$ = (org.apache.avro.io.DatumReader<usage_alert>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
