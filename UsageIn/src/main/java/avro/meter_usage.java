/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class meter_usage extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6194247895735715627L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"meter_usage\",\"namespace\":\"avro\",\"fields\":[{\"name\":\"premise\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Premise\"},{\"name\":\"meter\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Meter Number\"},{\"name\":\"usage\",\"type\":\"int\",\"doc\":\"Usage from field.\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<meter_usage> ENCODER =
      new BinaryMessageEncoder<meter_usage>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<meter_usage> DECODER =
      new BinaryMessageDecoder<meter_usage>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<meter_usage> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<meter_usage> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<meter_usage>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this meter_usage to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a meter_usage from a ByteBuffer. */
  public static meter_usage fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Premise */
   private java.lang.String premise;
  /** Meter Number */
   private java.lang.String meter;
  /** Usage from field. */
   private int usage;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public meter_usage() {}

  /**
   * All-args constructor.
   * @param premise Premise
   * @param meter Meter Number
   * @param usage Usage from field.
   */
  public meter_usage(java.lang.String premise, java.lang.String meter, java.lang.Integer usage) {
    this.premise = premise;
    this.meter = meter;
    this.usage = usage;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return premise;
    case 1: return meter;
    case 2: return usage;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: premise = (java.lang.String)value$; break;
    case 1: meter = (java.lang.String)value$; break;
    case 2: usage = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'premise' field.
   * @return Premise
   */
  public java.lang.String getPremise() {
    return premise;
  }


  /**
   * Gets the value of the 'meter' field.
   * @return Meter Number
   */
  public java.lang.String getMeter() {
    return meter;
  }


  /**
   * Gets the value of the 'usage' field.
   * @return Usage from field.
   */
  public java.lang.Integer getUsage() {
    return usage;
  }


  /**
   * Creates a new meter_usage RecordBuilder.
   * @return A new meter_usage RecordBuilder
   */
  public static avro.meter_usage.Builder newBuilder() {
    return new avro.meter_usage.Builder();
  }

  /**
   * Creates a new meter_usage RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new meter_usage RecordBuilder
   */
  public static avro.meter_usage.Builder newBuilder(avro.meter_usage.Builder other) {
    return new avro.meter_usage.Builder(other);
  }

  /**
   * Creates a new meter_usage RecordBuilder by copying an existing meter_usage instance.
   * @param other The existing instance to copy.
   * @return A new meter_usage RecordBuilder
   */
  public static avro.meter_usage.Builder newBuilder(avro.meter_usage other) {
    return new avro.meter_usage.Builder(other);
  }

  /**
   * RecordBuilder for meter_usage instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<meter_usage>
    implements org.apache.avro.data.RecordBuilder<meter_usage> {

    /** Premise */
    private java.lang.String premise;
    /** Meter Number */
    private java.lang.String meter;
    /** Usage from field. */
    private int usage;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(avro.meter_usage.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.premise)) {
        this.premise = data().deepCopy(fields()[0].schema(), other.premise);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.meter)) {
        this.meter = data().deepCopy(fields()[1].schema(), other.meter);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.usage)) {
        this.usage = data().deepCopy(fields()[2].schema(), other.usage);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing meter_usage instance
     * @param other The existing instance to copy.
     */
    private Builder(avro.meter_usage other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.premise)) {
        this.premise = data().deepCopy(fields()[0].schema(), other.premise);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.meter)) {
        this.meter = data().deepCopy(fields()[1].schema(), other.meter);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.usage)) {
        this.usage = data().deepCopy(fields()[2].schema(), other.usage);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'premise' field.
      * Premise
      * @return The value.
      */
    public java.lang.String getPremise() {
      return premise;
    }

    /**
      * Sets the value of the 'premise' field.
      * Premise
      * @param value The value of 'premise'.
      * @return This builder.
      */
    public avro.meter_usage.Builder setPremise(java.lang.String value) {
      validate(fields()[0], value);
      this.premise = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'premise' field has been set.
      * Premise
      * @return True if the 'premise' field has been set, false otherwise.
      */
    public boolean hasPremise() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'premise' field.
      * Premise
      * @return This builder.
      */
    public avro.meter_usage.Builder clearPremise() {
      premise = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'meter' field.
      * Meter Number
      * @return The value.
      */
    public java.lang.String getMeter() {
      return meter;
    }

    /**
      * Sets the value of the 'meter' field.
      * Meter Number
      * @param value The value of 'meter'.
      * @return This builder.
      */
    public avro.meter_usage.Builder setMeter(java.lang.String value) {
      validate(fields()[1], value);
      this.meter = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'meter' field has been set.
      * Meter Number
      * @return True if the 'meter' field has been set, false otherwise.
      */
    public boolean hasMeter() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'meter' field.
      * Meter Number
      * @return This builder.
      */
    public avro.meter_usage.Builder clearMeter() {
      meter = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'usage' field.
      * Usage from field.
      * @return The value.
      */
    public java.lang.Integer getUsage() {
      return usage;
    }

    /**
      * Sets the value of the 'usage' field.
      * Usage from field.
      * @param value The value of 'usage'.
      * @return This builder.
      */
    public avro.meter_usage.Builder setUsage(int value) {
      validate(fields()[2], value);
      this.usage = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'usage' field has been set.
      * Usage from field.
      * @return True if the 'usage' field has been set, false otherwise.
      */
    public boolean hasUsage() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'usage' field.
      * Usage from field.
      * @return This builder.
      */
    public avro.meter_usage.Builder clearUsage() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public meter_usage build() {
      try {
        meter_usage record = new meter_usage();
        record.premise = fieldSetFlags()[0] ? this.premise : (java.lang.String) defaultValue(fields()[0]);
        record.meter = fieldSetFlags()[1] ? this.meter : (java.lang.String) defaultValue(fields()[1]);
        record.usage = fieldSetFlags()[2] ? this.usage : (java.lang.Integer) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<meter_usage>
    WRITER$ = (org.apache.avro.io.DatumWriter<meter_usage>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<meter_usage>
    READER$ = (org.apache.avro.io.DatumReader<meter_usage>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
