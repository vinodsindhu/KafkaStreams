/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class account_snapshot extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2281101818702187576L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"account_snapshot\",\"namespace\":\"avro\",\"fields\":[{\"name\":\"user_name\",\"type\":\"string\",\"doc\":\"Web User Name\"},{\"name\":\"email_id\",\"type\":\"string\",\"doc\":\"Email ID\"},{\"name\":\"customer\",\"type\":\"string\",\"doc\":\"Customer code\"},{\"name\":\"premise\",\"type\":\"string\",\"doc\":\"Premise code\"},{\"name\":\"company\",\"type\":\"string\",\"doc\":\"Company South or North\"},{\"name\":\"meter\",\"type\":\"string\",\"doc\":\"Meter Number\"},{\"name\":\"total_usage\",\"type\":\"int\",\"doc\":\"Total unbilled usage on this meter.\"},{\"name\":\"usage_alerted_at_100\",\"type\":\"string\",\"doc\":\"Usage alert created once usage crossed 100\",\"default\":\"N\"},{\"name\":\"usage_alerted_at_200\",\"type\":\"string\",\"doc\":\"Usage alert created once usage crossed 200\",\"default\":\"N\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<account_snapshot> ENCODER =
      new BinaryMessageEncoder<account_snapshot>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<account_snapshot> DECODER =
      new BinaryMessageDecoder<account_snapshot>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<account_snapshot> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<account_snapshot> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<account_snapshot>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this account_snapshot to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a account_snapshot from a ByteBuffer. */
  public static account_snapshot fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Web User Name */
   private java.lang.CharSequence user_name;
  /** Email ID */
   private java.lang.CharSequence email_id;
  /** Customer code */
   private java.lang.CharSequence customer;
  /** Premise code */
   private java.lang.CharSequence premise;
  /** Company South or North */
   private java.lang.CharSequence company;
  /** Meter Number */
   private java.lang.CharSequence meter;
  /** Total unbilled usage on this meter. */
   private int total_usage;
  /** Usage alert created once usage crossed 100 */
   private java.lang.CharSequence usage_alerted_at_100;
  /** Usage alert created once usage crossed 200 */
   private java.lang.CharSequence usage_alerted_at_200;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public account_snapshot() {}

  /**
   * All-args constructor.
   * @param user_name Web User Name
   * @param email_id Email ID
   * @param customer Customer code
   * @param premise Premise code
   * @param company Company South or North
   * @param meter Meter Number
   * @param total_usage Total unbilled usage on this meter.
   * @param usage_alerted_at_100 Usage alert created once usage crossed 100
   * @param usage_alerted_at_200 Usage alert created once usage crossed 200
   */
  public account_snapshot(java.lang.CharSequence user_name, java.lang.CharSequence email_id, java.lang.CharSequence customer, java.lang.CharSequence premise, java.lang.CharSequence company, java.lang.CharSequence meter, java.lang.Integer total_usage, java.lang.CharSequence usage_alerted_at_100, java.lang.CharSequence usage_alerted_at_200) {
    this.user_name = user_name;
    this.email_id = email_id;
    this.customer = customer;
    this.premise = premise;
    this.company = company;
    this.meter = meter;
    this.total_usage = total_usage;
    this.usage_alerted_at_100 = usage_alerted_at_100;
    this.usage_alerted_at_200 = usage_alerted_at_200;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return user_name;
    case 1: return email_id;
    case 2: return customer;
    case 3: return premise;
    case 4: return company;
    case 5: return meter;
    case 6: return total_usage;
    case 7: return usage_alerted_at_100;
    case 8: return usage_alerted_at_200;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: user_name = (java.lang.CharSequence)value$; break;
    case 1: email_id = (java.lang.CharSequence)value$; break;
    case 2: customer = (java.lang.CharSequence)value$; break;
    case 3: premise = (java.lang.CharSequence)value$; break;
    case 4: company = (java.lang.CharSequence)value$; break;
    case 5: meter = (java.lang.CharSequence)value$; break;
    case 6: total_usage = (java.lang.Integer)value$; break;
    case 7: usage_alerted_at_100 = (java.lang.CharSequence)value$; break;
    case 8: usage_alerted_at_200 = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'user_name' field.
   * @return Web User Name
   */
  public java.lang.CharSequence getUserName() {
    return user_name;
  }


  /**
   * Gets the value of the 'email_id' field.
   * @return Email ID
   */
  public java.lang.CharSequence getEmailId() {
    return email_id;
  }


  /**
   * Gets the value of the 'customer' field.
   * @return Customer code
   */
  public java.lang.CharSequence getCustomer() {
    return customer;
  }


  /**
   * Gets the value of the 'premise' field.
   * @return Premise code
   */
  public java.lang.CharSequence getPremise() {
    return premise;
  }


  /**
   * Gets the value of the 'company' field.
   * @return Company South or North
   */
  public java.lang.CharSequence getCompany() {
    return company;
  }


  /**
   * Gets the value of the 'meter' field.
   * @return Meter Number
   */
  public java.lang.CharSequence getMeter() {
    return meter;
  }


  /**
   * Gets the value of the 'total_usage' field.
   * @return Total unbilled usage on this meter.
   */
  public java.lang.Integer getTotalUsage() {
    return total_usage;
  }


  /**
   * Gets the value of the 'usage_alerted_at_100' field.
   * @return Usage alert created once usage crossed 100
   */
  public java.lang.CharSequence getUsageAlertedAt100() {
    return usage_alerted_at_100;
  }


  /**
   * Gets the value of the 'usage_alerted_at_200' field.
   * @return Usage alert created once usage crossed 200
   */
  public java.lang.CharSequence getUsageAlertedAt200() {
    return usage_alerted_at_200;
  }


  /**
   * Creates a new account_snapshot RecordBuilder.
   * @return A new account_snapshot RecordBuilder
   */
  public static avro.account_snapshot.Builder newBuilder() {
    return new avro.account_snapshot.Builder();
  }

  /**
   * Creates a new account_snapshot RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new account_snapshot RecordBuilder
   */
  public static avro.account_snapshot.Builder newBuilder(avro.account_snapshot.Builder other) {
    return new avro.account_snapshot.Builder(other);
  }

  /**
   * Creates a new account_snapshot RecordBuilder by copying an existing account_snapshot instance.
   * @param other The existing instance to copy.
   * @return A new account_snapshot RecordBuilder
   */
  public static avro.account_snapshot.Builder newBuilder(avro.account_snapshot other) {
    return new avro.account_snapshot.Builder(other);
  }

  /**
   * RecordBuilder for account_snapshot instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<account_snapshot>
    implements org.apache.avro.data.RecordBuilder<account_snapshot> {

    /** Web User Name */
    private java.lang.CharSequence user_name;
    /** Email ID */
    private java.lang.CharSequence email_id;
    /** Customer code */
    private java.lang.CharSequence customer;
    /** Premise code */
    private java.lang.CharSequence premise;
    /** Company South or North */
    private java.lang.CharSequence company;
    /** Meter Number */
    private java.lang.CharSequence meter;
    /** Total unbilled usage on this meter. */
    private int total_usage;
    /** Usage alert created once usage crossed 100 */
    private java.lang.CharSequence usage_alerted_at_100;
    /** Usage alert created once usage crossed 200 */
    private java.lang.CharSequence usage_alerted_at_200;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(avro.account_snapshot.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.user_name)) {
        this.user_name = data().deepCopy(fields()[0].schema(), other.user_name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.email_id)) {
        this.email_id = data().deepCopy(fields()[1].schema(), other.email_id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.customer)) {
        this.customer = data().deepCopy(fields()[2].schema(), other.customer);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.premise)) {
        this.premise = data().deepCopy(fields()[3].schema(), other.premise);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.company)) {
        this.company = data().deepCopy(fields()[4].schema(), other.company);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.meter)) {
        this.meter = data().deepCopy(fields()[5].schema(), other.meter);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.total_usage)) {
        this.total_usage = data().deepCopy(fields()[6].schema(), other.total_usage);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.usage_alerted_at_100)) {
        this.usage_alerted_at_100 = data().deepCopy(fields()[7].schema(), other.usage_alerted_at_100);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.usage_alerted_at_200)) {
        this.usage_alerted_at_200 = data().deepCopy(fields()[8].schema(), other.usage_alerted_at_200);
        fieldSetFlags()[8] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing account_snapshot instance
     * @param other The existing instance to copy.
     */
    private Builder(avro.account_snapshot other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.user_name)) {
        this.user_name = data().deepCopy(fields()[0].schema(), other.user_name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.email_id)) {
        this.email_id = data().deepCopy(fields()[1].schema(), other.email_id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.customer)) {
        this.customer = data().deepCopy(fields()[2].schema(), other.customer);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.premise)) {
        this.premise = data().deepCopy(fields()[3].schema(), other.premise);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.company)) {
        this.company = data().deepCopy(fields()[4].schema(), other.company);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.meter)) {
        this.meter = data().deepCopy(fields()[5].schema(), other.meter);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.total_usage)) {
        this.total_usage = data().deepCopy(fields()[6].schema(), other.total_usage);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.usage_alerted_at_100)) {
        this.usage_alerted_at_100 = data().deepCopy(fields()[7].schema(), other.usage_alerted_at_100);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.usage_alerted_at_200)) {
        this.usage_alerted_at_200 = data().deepCopy(fields()[8].schema(), other.usage_alerted_at_200);
        fieldSetFlags()[8] = true;
      }
    }

    /**
      * Gets the value of the 'user_name' field.
      * Web User Name
      * @return The value.
      */
    public java.lang.CharSequence getUserName() {
      return user_name;
    }

    /**
      * Sets the value of the 'user_name' field.
      * Web User Name
      * @param value The value of 'user_name'.
      * @return This builder.
      */
    public avro.account_snapshot.Builder setUserName(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.user_name = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'user_name' field has been set.
      * Web User Name
      * @return True if the 'user_name' field has been set, false otherwise.
      */
    public boolean hasUserName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'user_name' field.
      * Web User Name
      * @return This builder.
      */
    public avro.account_snapshot.Builder clearUserName() {
      user_name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'email_id' field.
      * Email ID
      * @return The value.
      */
    public java.lang.CharSequence getEmailId() {
      return email_id;
    }

    /**
      * Sets the value of the 'email_id' field.
      * Email ID
      * @param value The value of 'email_id'.
      * @return This builder.
      */
    public avro.account_snapshot.Builder setEmailId(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.email_id = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'email_id' field has been set.
      * Email ID
      * @return True if the 'email_id' field has been set, false otherwise.
      */
    public boolean hasEmailId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'email_id' field.
      * Email ID
      * @return This builder.
      */
    public avro.account_snapshot.Builder clearEmailId() {
      email_id = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'customer' field.
      * Customer code
      * @return The value.
      */
    public java.lang.CharSequence getCustomer() {
      return customer;
    }

    /**
      * Sets the value of the 'customer' field.
      * Customer code
      * @param value The value of 'customer'.
      * @return This builder.
      */
    public avro.account_snapshot.Builder setCustomer(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.customer = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'customer' field has been set.
      * Customer code
      * @return True if the 'customer' field has been set, false otherwise.
      */
    public boolean hasCustomer() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'customer' field.
      * Customer code
      * @return This builder.
      */
    public avro.account_snapshot.Builder clearCustomer() {
      customer = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'premise' field.
      * Premise code
      * @return The value.
      */
    public java.lang.CharSequence getPremise() {
      return premise;
    }

    /**
      * Sets the value of the 'premise' field.
      * Premise code
      * @param value The value of 'premise'.
      * @return This builder.
      */
    public avro.account_snapshot.Builder setPremise(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.premise = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'premise' field has been set.
      * Premise code
      * @return True if the 'premise' field has been set, false otherwise.
      */
    public boolean hasPremise() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'premise' field.
      * Premise code
      * @return This builder.
      */
    public avro.account_snapshot.Builder clearPremise() {
      premise = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'company' field.
      * Company South or North
      * @return The value.
      */
    public java.lang.CharSequence getCompany() {
      return company;
    }

    /**
      * Sets the value of the 'company' field.
      * Company South or North
      * @param value The value of 'company'.
      * @return This builder.
      */
    public avro.account_snapshot.Builder setCompany(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.company = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'company' field has been set.
      * Company South or North
      * @return True if the 'company' field has been set, false otherwise.
      */
    public boolean hasCompany() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'company' field.
      * Company South or North
      * @return This builder.
      */
    public avro.account_snapshot.Builder clearCompany() {
      company = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'meter' field.
      * Meter Number
      * @return The value.
      */
    public java.lang.CharSequence getMeter() {
      return meter;
    }

    /**
      * Sets the value of the 'meter' field.
      * Meter Number
      * @param value The value of 'meter'.
      * @return This builder.
      */
    public avro.account_snapshot.Builder setMeter(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.meter = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'meter' field has been set.
      * Meter Number
      * @return True if the 'meter' field has been set, false otherwise.
      */
    public boolean hasMeter() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'meter' field.
      * Meter Number
      * @return This builder.
      */
    public avro.account_snapshot.Builder clearMeter() {
      meter = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'total_usage' field.
      * Total unbilled usage on this meter.
      * @return The value.
      */
    public java.lang.Integer getTotalUsage() {
      return total_usage;
    }

    /**
      * Sets the value of the 'total_usage' field.
      * Total unbilled usage on this meter.
      * @param value The value of 'total_usage'.
      * @return This builder.
      */
    public avro.account_snapshot.Builder setTotalUsage(int value) {
      validate(fields()[6], value);
      this.total_usage = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'total_usage' field has been set.
      * Total unbilled usage on this meter.
      * @return True if the 'total_usage' field has been set, false otherwise.
      */
    public boolean hasTotalUsage() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'total_usage' field.
      * Total unbilled usage on this meter.
      * @return This builder.
      */
    public avro.account_snapshot.Builder clearTotalUsage() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'usage_alerted_at_100' field.
      * Usage alert created once usage crossed 100
      * @return The value.
      */
    public java.lang.CharSequence getUsageAlertedAt100() {
      return usage_alerted_at_100;
    }

    /**
      * Sets the value of the 'usage_alerted_at_100' field.
      * Usage alert created once usage crossed 100
      * @param value The value of 'usage_alerted_at_100'.
      * @return This builder.
      */
    public avro.account_snapshot.Builder setUsageAlertedAt100(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.usage_alerted_at_100 = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'usage_alerted_at_100' field has been set.
      * Usage alert created once usage crossed 100
      * @return True if the 'usage_alerted_at_100' field has been set, false otherwise.
      */
    public boolean hasUsageAlertedAt100() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'usage_alerted_at_100' field.
      * Usage alert created once usage crossed 100
      * @return This builder.
      */
    public avro.account_snapshot.Builder clearUsageAlertedAt100() {
      usage_alerted_at_100 = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'usage_alerted_at_200' field.
      * Usage alert created once usage crossed 200
      * @return The value.
      */
    public java.lang.CharSequence getUsageAlertedAt200() {
      return usage_alerted_at_200;
    }

    /**
      * Sets the value of the 'usage_alerted_at_200' field.
      * Usage alert created once usage crossed 200
      * @param value The value of 'usage_alerted_at_200'.
      * @return This builder.
      */
    public avro.account_snapshot.Builder setUsageAlertedAt200(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.usage_alerted_at_200 = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'usage_alerted_at_200' field has been set.
      * Usage alert created once usage crossed 200
      * @return True if the 'usage_alerted_at_200' field has been set, false otherwise.
      */
    public boolean hasUsageAlertedAt200() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'usage_alerted_at_200' field.
      * Usage alert created once usage crossed 200
      * @return This builder.
      */
    public avro.account_snapshot.Builder clearUsageAlertedAt200() {
      usage_alerted_at_200 = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public account_snapshot build() {
      try {
        account_snapshot record = new account_snapshot();
        record.user_name = fieldSetFlags()[0] ? this.user_name : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.email_id = fieldSetFlags()[1] ? this.email_id : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.customer = fieldSetFlags()[2] ? this.customer : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.premise = fieldSetFlags()[3] ? this.premise : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.company = fieldSetFlags()[4] ? this.company : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.meter = fieldSetFlags()[5] ? this.meter : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.total_usage = fieldSetFlags()[6] ? this.total_usage : (java.lang.Integer) defaultValue(fields()[6]);
        record.usage_alerted_at_100 = fieldSetFlags()[7] ? this.usage_alerted_at_100 : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.usage_alerted_at_200 = fieldSetFlags()[8] ? this.usage_alerted_at_200 : (java.lang.CharSequence) defaultValue(fields()[8]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<account_snapshot>
    WRITER$ = (org.apache.avro.io.DatumWriter<account_snapshot>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<account_snapshot>
    READER$ = (org.apache.avro.io.DatumReader<account_snapshot>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
